name: CI/CD Pipeline

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

env:
  DOTNET_VERSION: '9.0.x'
  AZURE_WEBAPP_NAME: 'Ai-My'
  AZURE_WEBAPP_PACKAGE_PATH: './publish'
  PROJECT_PATH: './My-Ai/Ai-My.csproj'
  STAGING_SLOT_NAME: 'staging'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run backend tests
      run: dotnet test My-Ai.Tests --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults/Backend

    - name: Run Blazor component tests
      run: dotnet test My-Ai.BlazorTests --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults/Frontend

    - name: Generate test coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.11
      with:
        reports: 'TestResults/**/coverage.cobertura.xml'
        targetdir: 'TestResults/Coverage'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'

    - name: Upload test coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage-report
        path: TestResults/Coverage/

    - name: Comment test coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: test-coverage
        path: TestResults/Coverage/SummaryGithub.md
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish application
      if: github.ref == 'refs/heads/master'
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Upload publish artifacts
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v4
      with:
        name: webapp-artifacts
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy-to-staging:
    name: Deploy to Staging Slot
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/master'
    environment: staging            # Use production here if you want approvals before deploying to staging
    permissions:
      contents: read
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: webapp-artifacts
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to staging slot
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: ${{ env.STAGING_SLOT_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Restart staging slot
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: |
          az webapp restart \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --slot "${{ env.STAGING_SLOT_NAME }}"

    - name: Smoke test staging (expect 200)
      shell: bash
      run: |
        set -euo pipefail
        STAGING_URL="https://${{ env.AZURE_WEBAPP_NAME }}-${{ env.STAGING_SLOT_NAME }}.azurewebsites.net/"
        echo "Smoking: $STAGING_URL"
        for i in {1..15}; do
          CODE=$(curl -sS -o /dev/null -w "%{http_code}" "$STAGING_URL" || echo 000)
          echo "Attempt $i => HTTP $CODE"
          if [ "$CODE" = "200" ]; then
            echo "Staging healthy."
            exit 0
          fi
          sleep 10
        done
        echo "Smoke test failed for $STAGING_URL"
        exit 1

  swap-to-production:
    name: Swap Staging to Production
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    if: github.ref == 'refs/heads/master'
    environment: production         # Approval gate before swap
    steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Swap slots (staging -> production)
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: |
          az webapp deployment slot swap \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_WEBAPP_NAME }}" \
            --slot "${{ env.STAGING_SLOT_NAME }}" \
            --target-slot production

    - name: Verify production (expect 200)
      shell: bash
      run: |
        set -euo pipefail
        PROD_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/"
        echo "Verifying: $PROD_URL"
        for i in {1..15}; do
          CODE=$(curl -sS -o /dev/null -w "%{http_code}" "$PROD_URL" || echo 000)
          echo "Attempt $i => HTTP $CODE"
          if [ "$CODE" = "200" ]; then
            echo "Production healthy."
            exit 0
          fi
          sleep 10
        done
        echo "Production verification failed for $PROD_URL"
        exit 1