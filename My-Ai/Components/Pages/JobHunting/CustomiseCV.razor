@page "/CustomiseCV"
@rendermode InteractiveServer
@using My_Ai.Components.Shared
@using My_Ai.Services
@using My_Ai.Util
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http

<HeadContent>
    <link rel="preload" as="image" href='@Assets["images/jobhunting/pen-and-paper.jpg"]' />
</HeadContent>

<PageTitle>Customise CV</PageTitle>

<Banner Title="Customise Your CV"
        Subtitle="Upload your CV and job description and get a customised CV"
        BackgroundImageUrl='@Assets["images/jobhunting/pen-and-paper.jpg"]'
        BackgroundPosition="center 30%"
        Overlay="rgba(0,0,0,.35)"
        MinHeight="200px"
        PaddingY="2rem" />

<div class="container py-3">
    <div class="mb-3">
        <label for="jobDesc" class="form-label">Job description</label>
        <InputTextArea id="jobDesc"
                       class="form-control"
                       rows="12"
                       placeholder="Paste the job description here..."
                       @bind-Value="jobDescription" />
    </div>

    <div class="mb-3">
        <label class="form-label">Upload your CV</label>
        <InputFile OnChange="OnFileSelected" accept=".pdf,.docx,.txt" />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">@errorMessage</div>
        }
        @if (cvFile != null)
        {
            <div class="mt-2">
                <small class="text-muted">
                    Selected: @cvFile.Name (@(FormatFileSize(cvFile.Size)))
                </small>
            </div>
        }
    </div>

    <button class="btn btn-primary @(isProcessing ? "loading" : "")" @onclick="SubmitAsync" disabled="@(cvFile == null || isProcessing)">
        @if (isProcessing)
        {
            <span class="spinner-border spinner-border-sm me-2"></span>
            <span class="btn-text">Customising your CV...</span>
        }
        else
        {
            <span class="btn-text">Customise your CV</span>
        }
    </button>

    @if (!string.IsNullOrWhiteSpace(result))
    {
        <div class="card mt-3">
            <div class="card-header">Result</div>
            <div class="card-body">
                @((MarkupString)result)
            </div>
        </div>
    }
</div>

<LoadingSpinner IsVisible="@isProcessing" Message="Customising your CV to match the job description..." />


@code {
    private string? jobDescription;
    private IBrowserFile? cvFile;
    private string? result;
    private string? errorMessage;
    private bool isProcessing = false;

    [Inject] private IProcessRequest Processor { get; set; } = default!;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        cvFile = e.File;

        // Validate file size
        const long maxFileSize = 10 * 1024 * 1024; // 10MB
        if (cvFile.Size > maxFileSize)
        {
            errorMessage = $"File is too large. Maximum size is {FormatFileSize(maxFileSize)}.";
            cvFile = null;
            return;
        }

        var allowedTypes = new[] { "application/pdf", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "text/plain" };
        if (!allowedTypes.Contains(cvFile.ContentType))
        {
            errorMessage = "Please select a PDF, DOCX, or TXT file.";
            cvFile = null;
            return;
        }
    }

    private async Task SubmitAsync()
    {
        if (cvFile is null)
            return;

        isProcessing = true;
        errorMessage = null;
        result = null;
        StateHasChanged();

        try
        {
            // Copy to a seekable stream
            await using var browserStream = cvFile.OpenReadStream(10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await browserStream.CopyToAsync(ms);
            ms.Position = 0;

            var formFile = new FormFile(ms, 0, ms.Length, "file", cvFile.Name)
            {
                Headers = new HeaderDictionary(),
                ContentType = cvFile.ContentType
            };

            result = await Processor.ProcessWordDocumentAsync(formFile, Prompts.CustomiseCv, jobDescription);
            result = HtmlConverter.ReWriteHtml(result);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}
