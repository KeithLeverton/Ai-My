@page "/ReviewCV"
@rendermode InteractiveServer
@using My_Ai.Components.Shared
@using My_Ai.Services
@using My_Ai.Util
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http

<PageTitle>Review CV</PageTitle>

<Banner Title="Review Your CV"
        Subtitle="Upload your CV and get actionable feedback"
        BackgroundImageUrl='@Assets["images/jobhunting/pen-and-paper.jpg"]'
        BackgroundPosition="center 30%"
        Overlay="rgba(0,0,0,.35)"
        MinHeight="200px"
        PaddingY="2rem" />

<div class="container py-3" aria-busy="@isProcessing">
    <div class="mb-3">
        <label class="form-label">Upload your CV</label>
        <InputFile OnChange="OnFileSelected" accept=".pdf,.docx,.txt" />
        @if (cvFile != null)
        {
            <div class="mt-2">
                <small class="text-muted">
                    Selected: @cvFile.Name (@(FormatFileSize(cvFile.Size)))
                </small>
            </div>
        }
    </div>

    <button class="btn btn-primary @(isProcessing ? "loading" : "")"
            @onclick="SubmitAsync"
            disabled="@(cvFile == null || isProcessing)">
        @if (isProcessing)
        {
            <span class="spinner-border spinner-border-sm me-2"></span>
            <span class="btn-text">Reviewing your CV...</span>
        }
        else
        {
            <span class="btn-text">Review your CV</span>
        }
    </button>

    @if (!string.IsNullOrWhiteSpace(result))
    {
        <div class="card mt-3">
            <div class="card-header">Result</div>
            <div class="card-body">
                @((MarkupString)result)
            </div>
        </div>
    }
</div>

<LoadingSpinner IsVisible="@isProcessing" Message="Reviewing your CV..." />

@code {
    private IBrowserFile? cvFile;
    private string? result;
    private bool isProcessing = false;

    [Inject] private IProcessRequest Processor { get; set; } = default!;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        cvFile = e.File;
    }

    private async Task SubmitAsync()
    {
        if (cvFile is null)
            return;

        isProcessing = true;
        result = null;
        StateHasChanged();

        try
        {
            await using var browserStream = cvFile.OpenReadStream(10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await browserStream.CopyToAsync(ms);
            ms.Position = 0;

            var formFile = new FormFile(ms, 0, ms.Length, "file", cvFile.Name)
            {
                Headers = new HeaderDictionary(),
                ContentType = cvFile.ContentType
            };

            result = await Processor.ProcessWordDocumentAsync(formFile, Prompts.ImproveCv);
            result = HtmlConverter.ReWriteHtml(result);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}
